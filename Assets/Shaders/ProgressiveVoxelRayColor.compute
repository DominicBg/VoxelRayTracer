#pragma kernel CSMain

#include "VoxelMaterialLink.cginc"
#include "VoxelRayTracerDatas.cginc"
#include "Utils/MathUtils.cginc"


Texture3D<uint> voxel;
Texture3D<float> volumetricNoise;

StructuredBuffer<LightData> lightDatas;
float4 iVoxelSizes;

Texture2D<float4> InRayOrigin;
Texture2D<float4> InRayDirection;
Texture2D<float4> InHitPositionDistance;
Texture2D<uint> InHitMaterialID;

RWTexture2D<float4> InOutHitNormalHasHit; //normal = xyz, has hit = w

RWTexture2D<float4> OutSurfaceColor;
RWTexture2D<float4> OutFrameColor;
int frameCount;
int reflectionCount;


SceneData GetSceneData(uint2 id)
{
    Settings settings;
    settings.blurIterations = 0;
    settings.shadowIterations = 0;
    settings.volumetricLightSteps = 10;
    settings.maxSteps = length(iVoxelSizes) * 2;

    SceneData sceneData;
    sceneData.settings = settings;
    sceneData.voxel = voxel;
    sceneData.volumetricNoise = volumetricNoise;
    sceneData.time = 6.;
    sceneData.voxelSizes = int3(iVoxelSizes.x, iVoxelSizes.y, iVoxelSizes.z); //test weird
    sceneData.lightDatas = lightDatas;
    sceneData.seed = WangHash(frameCount) + id.x * 23  + id.y * 97;

    return sceneData;
}

RayHit GetRayHit(uint2 i)
{
    RayHit hit;
    hit.ro = InRayOrigin[i].xyz;
    hit.rd = InRayDirection[i].xyz;
    hit.dist = InHitPositionDistance[i].w;
    hit.pos = InHitPositionDistance[i].xyz;
    hit.materialID = InHitMaterialID[i];
    hit.normal = InOutHitNormalHasHit[i].xyz;
    hit.hasHit = InOutHitNormalHasHit[i].w;

    hit.cell = uint3(hit.pos - hit.normal * 0.1);
    hit.reflDir = reflect(hit.rd, hit.normal);

    hit.uv = 0; // lol
    hit.dist2 = 0; //lol
    return hit;
}

[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    SceneData sceneData = GetSceneData(id.xy);
    RayHit hit = GetRayHit(id.xy);

    //modify the normal
    float3 col = GetColor(sceneData, hit);


    float3 lightCol;

    if(!hit.hasHit)
    {
        col = SampleSkybox(sceneData, hit);
        lightCol = 1;
    }
    else
    {
        lightCol = CalculateLight(sceneData, hit);
    }

    if(!hit.hasHit)
    {
        hit.dist = 999999;
    }
    col += CalculateMonteCarloVolumetricLight(hit.ro, hit.rd, hit.dist, sceneData);

    if(reflectionCount == 0)
    {
        OutSurfaceColor[id.xy] = float4(col, 1);
        OutFrameColor[id.xy] = float4(lightCol * OutSurfaceColor[id.xy].xyz, 1);
    }
    else
    {
        OutSurfaceColor[id.xy] *= float4(col, 1);
        OutFrameColor[id.xy] += float4(lightCol * OutSurfaceColor[id.xy].xyz, 1);
    }

    //Prevent future reflection
    if(!hit.hasHit)
    {
        OutSurfaceColor[id.xy] = 0;
    }


    InOutHitNormalHasHit[id.xy] = float4(hit.normal, hit.hasHit);
}
