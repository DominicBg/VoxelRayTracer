#pragma kernel CSMain

#include "VoxelMaterialLink.cginc"
#include "VoxelRayTracerDatas.cginc"
#include "VoxelRayCaster.cginc"

Texture3D<uint> voxel;
float4 iVoxelSizes;

Texture2D<float4> InHitPositionDistance;
Texture2D<float4> InHitNormal;
Texture2D<uint> InHitMaterialID;

RWTexture2D<float4> InOutRayOrigin;
RWTexture2D<float4> InOutRayDirection;

int frameCount;


SceneData GetSceneData(uint2 id)
{
    Settings settings;
    settings.blurIterations = 0;
    settings.shadowIterations = 0;
    settings.volumetricLightSteps = 0;
    settings.maxSteps = length(iVoxelSizes) * 2;

    SceneData sceneData;
    sceneData.settings = settings;
    sceneData.voxel = voxel;
    sceneData.time = 0.5;
    sceneData.voxelSizes = int3(iVoxelSizes.x, iVoxelSizes.y, iVoxelSizes.z);
    sceneData.seed = (WangHash(frameCount * 25) + WangHash(id.x) +  WangHash(id.y)) / 3 ;

    return sceneData;
}


RayHit GetHit(uint2 i)
{
    RayHit hit;
    hit.ro = InOutRayOrigin[i].xyz;
    hit.rd = InOutRayDirection[i].xyz;
    hit.pos = InHitPositionDistance[i].xyz;
    hit.dist = InHitPositionDistance[i].w;
    hit.materialID = InHitMaterialID[i];
    hit.normal = InHitNormal[i].xyz;
    hit.hasHit = InHitNormal[i].w;

    hit.cell = uint3(hit.pos - hit.normal * 0.01);
    hit.reflDir = reflect(hit.rd, hit.normal);

    hit.uv = 0; // lol
    hit.dist2 = 0; //lol
    return hit;
}


[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    uint2 i = id.xy;
    RayHit hit = GetHit(i);
    SceneData sceneData = GetSceneData(i);

    if (!hit.hasHit)
    {
        return;
    }

    float diffuseCoef = GetDiffuseCoef(hit);
    float3 reflDir = reflect(hit.rd, hit.normal);
    float3 hitPos = hit.pos + hit.normal * 0.001;
    uint refractMat = 5;
    
    if (hit.materialID == refractMat) //test refraction
    {
        float eta = 2.47;

        float chanceToRefract = NextFloat(0, 1,  sceneData.seed);

        //https://en.wikipedia.org/wiki/Total_internal_reflection#Critical_angle
        float criticalAngle = asin(1/eta);
        float currentAngle = acos(abs(dot(hit.rd, hit.normal)));
        float angleRatio = currentAngle / criticalAngle;

        if(NextFloat(0, 1,  sceneData.seed) > angleRatio)
        {
            float3 refractDir = refract(hit.rd, hit.normal, eta);
            if (!all(refractDir == 0))
            {
                //multi voxel traversal
                RayHit refractHit = RayCast(hit.pos - hit.normal * 0.001, refractDir, refractMat, sceneData);
                hitPos = refractHit.pos - refractHit.normal * 0.001;
                reflDir = hit.rd;
            }
        }
        //else use perfect reflection
    }
    else if (diffuseCoef > 0)
    {
        float3 diffuseDir = normalize(reflDir + RandomInSphere(sceneData.seed));
        float3 glossyDir = NextRandomDirection(reflDir, 0.0002, sceneData.seed);
        reflDir = lerp(glossyDir, diffuseDir, diffuseCoef);
    }

    InOutRayOrigin[i] = float4(hitPos, 1);
    InOutRayDirection[i] = float4(reflDir, 1);
}

