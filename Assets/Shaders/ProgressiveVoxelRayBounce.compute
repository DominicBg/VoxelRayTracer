#pragma kernel CSMain

#include "VoxelMaterialLink.cginc"
#include "VoxelRayTracerDatas.cginc"

Texture2D<float4> InHitPositionDistance;
Texture2D<float4> InHitNormal;
Texture2D<uint> InHitMaterialID;

RWTexture2D<float4> InOutRayOrigin;
RWTexture2D<float4> InOutRayDirection;

int frameCount;

RayHit GetHit(uint2 i)
{
    RayHit hit;
    hit.ro = InOutRayOrigin[i].xyz;
    hit.rd = InOutRayDirection[i].xyz;
    hit.pos = InHitPositionDistance[i].xyz;
    hit.dist = InHitPositionDistance[i].w;
    hit.materialID = InHitMaterialID[i];
    hit.normal = InHitNormal[i].xyz;
    hit.hasHit = InHitNormal[i].w;

    hit.cell = uint3(hit.pos - hit.normal * 0.01);
    hit.reflDir = reflect(hit.rd, hit.normal);

    hit.uv = 0; // lol
    hit.dist2 = 0; //lol
    return hit;
}


[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    uint2 i = id.xy;
    RayHit hit = GetHit(i);

    if(!hit.hasHit)
    {
        return;
    }

    float diffuseCoef = GetDiffuseCoef(hit);
    float3 reflDir = reflect(hit.rd, hit.normal);

    if(diffuseCoef > 0)
    {
        uint rngState = WangHash(frameCount + id.x * 61223  + id.y * 96737);
        float3 diffuseDir = normalize(reflDir + RandomInSphere(rngState));
        float3 glossyDir = NextRandomDirection(reflDir, 0.0002, rngState);
        reflDir = lerp(glossyDir, diffuseDir, diffuseCoef);
    }

    float3 newHitPos = hit.pos + hit.normal * 0.001;
    InOutRayOrigin[i] = float4(newHitPos, 1);
    InOutRayDirection[i] = float4(reflDir, 1);
}

