// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

#include "VoxelRayCaster.cginc"


Texture3D<uint> voxel;
float4 iVoxelSizes;

Texture2D<float4> InRayOrigin;
Texture2D<float4> InRayDirection;

RWTexture2D<float4> OutHitPositionDistance;
RWTexture2D<float4> OutHitNormalHasHit; //normal = xyz, has hit = w
RWTexture2D<uint> OutHitMaterialID;

int reflectionCount;


SceneData GetSceneData()
{
    // settings.blurIterations = iBlurIteration;
    // settings.shadowIterations = iShadowIteration;
    // settings.volumetricLightSteps = iVolumetricLightSteps;
    // settings.maxSteps = iMaxSteps;

    Settings settings;
    settings.blurIterations = 0;
    settings.shadowIterations = 0;
    settings.volumetricLightSteps = 0;
    settings.maxSteps = length(iVoxelSizes) * 2;

    SceneData sceneData;
    sceneData.settings = settings;
    sceneData.voxel = voxel;
    sceneData.time = 0;
    sceneData.voxelSizes = int3(iVoxelSizes.x, iVoxelSizes.y, iVoxelSizes.z);


    return sceneData;
    //sceneData.lightDatas = lightDatas;
    //sceneData.volumetricNoise = volumetricNoise;
}


[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    //Prevent future raycast if the previous hit didn't hit
    if(reflectionCount > 0 && !OutHitNormalHasHit[id.xy].w)
    {
        return;
    }

    float3 ro = InRayOrigin[id.xy].xyz;
    float3 rd = InRayDirection[id.xy].xyz;

    RayHit hit = RayCast(ro, rd, 1, GetSceneData());

    OutHitPositionDistance[id.xy] = float4(hit.pos, hit.dist);
    OutHitNormalHasHit[id.xy] = float4((hit.normal), hit.hasHit);
    OutHitMaterialID[id.xy] = hit.materialID;
}
