#pragma kernel CSMain

#include "Utils/MathUtils.cginc"
#include "VoxelMaterialLink.cginc"

Texture2D<float4> InColor;
Texture2D<float4> InHitNormalHasHit;
Texture2D<uint> InHitMaterialID;
Texture2D<float4> InHitPositionDistance;

RWTexture2D<float4> OutColorDenoised;

float threshold;
int2 resolution;

[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
    uint materialID = InHitMaterialID[id.xy];
    // if(materialID == 0)
    // {       
    //     OutColorDenoised[id.xy] = InColor[id.xy];
    //     return;
    // }

    float3 normal = InHitNormalHasHit[id.xy].xyz;
    int radius = 6;
    float depth = InHitPositionDistance[id.xy].w;
    
    float sampleCount = 1;
    float3 colorSum = InColor[id.xy];
    for (int y = -radius; y <= radius; y++)
    {
        for (int x = -radius; x <= radius; x++)
        {
            if(x == 0 && y == 0) continue;

            int2 id2 = id.xy + int2(x, y);
            //id2 = clamp(id2, int2(0, 0), resolution);
            uint materialID2 = InHitMaterialID[id2.xy];

            if(materialID != materialID2) continue;
            //if(materialID != materialID2 && abs(x) > 1 && abs(y) > 1) continue;
            float depth2 = InHitPositionDistance[id2].w;


            float3 normal2 = InHitNormalHasHit[id2.xy].xyz;
            float dotWeight = saturate(dot(normal, normal2));
            float diffuseWeight = GetDiffuseCoef(materialID2); // * 0.5 + 0.5;
            float blurDist = 1 - saturate(length(float2(x, y)) / radius);
            float distWeigt = 1 - saturate(distance(depth, depth2));

            float weight = 0.005 + dotWeight * diffuseWeight * distWeigt * blurDist;
            

            float3 col2 = InColor[id2].rgb;
            colorSum += col2 * weight;
            sampleCount += weight;
        }   
    }

    colorSum /= sampleCount;
    OutColorDenoised[id.xy] = float4(colorSum, 1);
}
